package ddpgx_test

import (
	"context"
	"fmt"
	"net"
	"strings"
	"testing"
	"time"

	"github.com/SKF/go-utility/v2/log"
	"github.com/SKF/go-utility/v2/trace/ddpgx"
	"github.com/jackc/pgmock"
	"github.com/jackc/pgproto3/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	dd_tracer "gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer"
)

func startServer(script *pgmock.Script, ln net.Listener, serverErrChan chan error) {
	defer close(serverErrChan)

	conn, err := ln.Accept()
	if err != nil {
		serverErrChan <- err
		return
	}
	defer conn.Close()

	err = conn.SetDeadline(time.Now().Add(time.Second))
	if err != nil {
		serverErrChan <- err
		return
	}

	err = script.Run(pgproto3.NewBackend(pgproto3.NewChunkReader(conn), conn))
	if err != nil {
		serverErrChan <- err
	}
}

func Test_TracingContext(t *testing.T) {
	dd_tracer.Start()
	ctx := context.Background()

	assert.True(t, false)
	script := &pgmock.Script{
		Steps: pgmock.AcceptUnauthenticatedConnRequestSteps(),
	}
	script.Steps = append(script.Steps, pgmock.ExpectMessage(&pgproto3.Query{String: "select 42"}))
	script.Steps = append(script.Steps, pgmock.SendMessage(&pgproto3.RowDescription{
		Fields: []pgproto3.FieldDescription{
			{
				Name:                 []byte("?column?"),
				TableOID:             0,
				TableAttributeNumber: 0,
				DataTypeOID:          23,
				DataTypeSize:         4,
				TypeModifier:         -1,
				Format:               0,
			},
		},
	}))
	script.Steps = append(script.Steps, pgmock.SendMessage(&pgproto3.DataRow{
		Values: [][]byte{[]byte("42")},
	}))
	script.Steps = append(script.Steps, pgmock.SendMessage(&pgproto3.CommandComplete{CommandTag: []byte("SELECT 1")}))
	script.Steps = append(script.Steps, pgmock.SendMessage(&pgproto3.ReadyForQuery{TxStatus: 'I'}))
	script.Steps = append(script.Steps, pgmock.ExpectMessage(&pgproto3.Terminate{}))

	ln, err := net.Listen("tcp", "127.0.0.1:")
	require.NoError(t, err)
	defer ln.Close()

	serverErrChan := make(chan error, 1)
	go startServer(script, ln, serverErrChan)

	parts := strings.Split(ln.Addr().String(), ":")
	connStr := fmt.Sprintf("sslmode=disable host=%s port=%s", parts[0], parts[1])

	conn, err := ddpgx.Connect(ctx, "test", connStr)
	require.NoError(t, err)

	_, err = conn.Exec(ctx, "select 42")
	assert.NoError(t, err)

	spanExec, exists := dd_tracer.SpanFromContext(ctx)
	log.Infof("spanExec", spanExec.Context().SpanID())
	require.True(t, exists)

	// assert.Len(t, results, 1)
	// assert.Nil(t, results[0].Err)
	// assert.Equal(t, "SELECT 1", string(results[0].CommandTag))
	// assert.Len(t, results[0].Rows, 1)
	// assert.Equal(t, "42", string(results[0].Rows[0][0]))

	conn.Close(ctx)

	assert.NoError(t, <-serverErrChan)
}
